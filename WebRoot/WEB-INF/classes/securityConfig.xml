<!--?xml version="1.0" encoding="UTF-8"? -->
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<http pattern="/images/**" security="none" />
	<http pattern="/styles/**" security="none" />
	<http pattern="/login.html" security="none" />
	<http auto-config="false" entry-point-ref="myAuthenticationEntryPoint">

		<!--访问/**资源的用户必须具有ROLE_USER的权限 -->
		<intercept-url pattern="/**" access="ROLE_USER" />
		<!-- <form-login login-page="/login.html" default-target-url="/index/index.html" 
			authentication-failure-url="/login.html" username-parameter="adminCode" password-parameter="password" 
			/> -->
		<remember-me key="myAppKey" user-service-ref="myUserDetailsService"/>
		
		<session-management>
			<concurrency-control error-if-maximum-exceeded="true"
				max-sessions="1" />
		</session-management>

		<!-- 自定义过滤器 -->
		<custom-filter position="FORM_LOGIN_FILTER"
			ref="personalUsernamePasswordAuthenticationFilter" />
		<custom-filter before="SECURITY_CONTEXT_FILTER" ref="myFilter" />

	</http>

	<!-- 未登录的切入点 -->
	<beans:bean id="myAuthenticationEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.html"></beans:property>
	</beans:bean>
	
	<beans:bean id="personalUsernamePasswordAuthenticationFilter"
		class="com.reece.spring.security.PersonalUsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationSuccessHandler" ref="personalAuthenticationSuccessHandler" />
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
	</beans:bean>
	
	<!-- 个人登录成功 -->
	<beans:bean id="personalAuthenticationSuccessHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler" >
		<beans:constructor-arg index="0" value="/index/index.html" />
	</beans:bean>

	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="myAuthenticationManager">
		<authentication-provider ref="myAuthenticationProvider" />
	</authentication-manager>

	<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
	<beans:bean id="myAuthenticationProvider"
		class="com.reece.spring.security.MyAuthenticationProvider">
		<beans:property name="userDetailsService" ref="myUserDetailsService" />
	</beans:bean>

	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<beans:bean id="myUserDetailsService"
		class="com.reece.spring.security.service.MyUserDetailService" />

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean class="com.reece.spring.security.MyFilterSecurityInterceptor"
		id="myFilter">
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean class="com.reece.spring.security.MyAccessDecisionManager"
		id="myAccessDecisionManager">
	</beans:bean>
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean
		class="com.reece.spring.security.MyInvocationSecurityMetaDatasource"
		id="securityMetadataSource">
	</beans:bean>

</beans:beans>